diff --git a/src/ethosu_device_u85.c b/src/ethosu_device_u85.c
index 31f6a77..60d4b43 100644
--- a/src/ethosu_device_u85.c
+++ b/src/ethosu_device_u85.c
@@ -55,41 +55,23 @@ uint64_t __attribute__((weak)) ethosu_address_remap(uint64_t address, int index)
     return address;
 }
 
-struct ethosu_device *ethosu_dev_init(void *const base_address, uint32_t secure_enable, uint32_t privilege_enable)
+enum ethosu_error_codes ethosu_dev_init(struct ethosu_device *dev)
 {
-    struct ethosu_device *dev = malloc(sizeof(struct ethosu_device));
-    if (!dev)
-    {
-        LOG_ERR("Failed to allocate memory for Ethos-U device");
-        return NULL;
-    }
-
-    dev->reg        = (volatile struct NPU_REG *)base_address;
-    dev->secure     = secure_enable;
-    dev->privileged = privilege_enable;
-
-    if (dev->reg->CONFIG.product != ETHOSU_PRODUCT_U85)
-    {
-        LOG_ERR("Failed to initialize device. Driver has not been compiled for this product");
-        goto err;
-    }
-
     // Make sure the NPU is in a known state
     if (ethosu_dev_soft_reset(dev) != ETHOSU_SUCCESS)
     {
         goto err;
     }
 
-    return dev;
+    return ETHOSU_SUCCESS;
 
 err:
-    free(dev);
-    return NULL;
+    return ETHOSU_GENERIC_FAILURE;
 }
 
-void ethosu_dev_deinit(struct ethosu_device *dev)
+enum ethosu_error_codes ethosu_dev_deinit(struct ethosu_device *dev)
 {
-    free(dev);
+    return ETHOSU_SUCCESS;
 }
 
 enum ethosu_error_codes ethosu_dev_axi_init(struct ethosu_device *dev)
